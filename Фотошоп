import os
from PyQt5.QtWidgets import (
   QApplication, QWidget,
   QFileDialog,
   QLabel, QPushButton, QListWidget,
   QHBoxLayout, QVBoxLayout
)
from PIL import Image, ImageFilter
from PyQt5.QtCore import Qt
from PyQt5.QtGui import QPixmap

app = QApplication([])
window = QWidget()
window.setWindowTitle('Easy Editor')
window.resize(700, 500)

btn_folder = QPushButton('Папка')
list_file = QListWidget()

photo = QLabel('Тут буде відображатися фото')

btn_left = QPushButton('Вліво')
btn_right = QPushButton('Вправо')
btn_flip = QPushButton("Дзеркало")
btn_sharp = QPushButton("Різкість")
btn_bw = QPushButton('Ч/Б')

line = QHBoxLayout()
col1 = QVBoxLayout()
col2 = QVBoxLayout()

col1.addWidget(btn_folder)
col1.addWidget(list_file)

col2.addWidget(photo, 95)
row = QHBoxLayout()
row.addWidget(btn_left)
row.addWidget(btn_right)
row.addWidget(btn_flip)
row.addWidget(btn_sharp)
row.addWidget(btn_bw)
col2.addLayout(row)

line.addLayout(col1, 20)
line.addLayout(col2, 80)
window.setLayout(line)

workdir = ''

def chooseWorkdir():
   global workdir
   workdir = QFileDialog.getExistingDirectory()

def filter(files, extensions):
   result = []
   for filename in files:
      for ext in extensions:
         if filename.endswith(ext):
            result.append(filename)
   return result

def showFilenameList():
   extensions = ['.jpg', '.jpeg', '.png', '.bmp', '.ico']
   chooseWorkdir()
   filenames = filter(os.listdir(workdir), extensions)
   list_file.clear()
   for filename in filenames:
      list_file.addItem(filename)

btn_folder.clicked.connect(showFilenameList)

class ImageProcessor():
   def __init__(self):
      self.image = None
      self.dir = None
      self.filename = None
      self.new_folder = 'Відредаговані фото'
   
   def loadImage(self, dir, filename):
      self.dir = dir
      self.filename = filename
      image_path = os.path.join(dir, filename)
      self.image = Image.open(image_path)

   def showImage(self, path):
      photo.hide()
      pixmapimage = QPixmap(path)
      w = photo.width()
      h = photo.height()
      pixmapimage = pixmapimage.scaled(w, h, Qt.KeepAspectRatio)
      photo.setPixmap(pixmapimage)
      photo.show()

   def do_bw(self):
      self.image = self.image.convert('L')
      self.file_save()
      image_path = os.path.join(self.dir, self.new_folder, self.filename)
      self.showImage(image_path)

   def do_left(self):
      self.image = self.image.transpose(Image.ROTATE_90)
      self.file_save()
      image_path = os.path.join(self.dir, self.new_folder, self.filename)
      self.showImage(image_path)
      
   def do_right(self):
      self.image = self.image.transpose(Image.ROTATE_270)
      self.file_save()
      image_path = os.path.join(self.dir, self.new_folder, self.filename)
      self.showImage(image_path)

   def do_flip(self):
      self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
      self.file_save()
      image_path = os.path.join(self.dir, self.new_folder, self.filename)
      self.showImage(image_path)
   
   def do_sharp(self):
      self.image = self.image.filter(ImageFilter.SHARPEN)
      self.file_save()
      image_path = os.path.join(self.dir, self.new_folder, self.filename)
      self.showImage(image_path)

   
   def file_save(self):
      path = os.path.join(self.dir, self.new_folder)
      if not os.path.isdir(path):
         os.mkdir(path)
      image_path = os.path.join(path, self.filename)
      self.image.save(image_path)



workimage = ImageProcessor()

def showChosenImage():
   if list_file.currentRow()>= 0:
      filename = list_file.currentItem().text()
      workimage.loadImage(workdir, filename)
      image_path = os.path.join(workimage.dir, workimage.filename)
      workimage.showImage(image_path)

list_file.currentRowChanged.connect(showChosenImage)
btn_bw.clicked.connect(workimage.do_bw)
btn_left.clicked.connect(workimage.do_left)
btn_right.clicked.connect(workimage.do_right)
btn_flip.clicked.connect(workimage.do_flip)
btn_sharp.clicked.connect(workimage.do_sharp)

window.show()
app.exec_()
